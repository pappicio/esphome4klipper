

esphome:
  name: 3d-presa
  friendly_name: 3d-presa

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino



# Enable logging
logger:

# Enable Home Assistant API
api:
 

ota:
  - platform: esphome
    

improv_serial:
wifi:
  networks:
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe1
    - password: !secret wifi_password1
   
   
      # Optional manual IP
  manual_ip:
    static_ip: 192.168.1.94
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:

# To have a "next url" for improv serial

web_server:
  version: 3

http_request:
  id: httpget
  useragent: esphome/device
  verify_ssl: false
  timeout: 
    seconds: 1

globals:
  - id: incorso
    type: boolean

  - id: isrelayON
    type: boolean
    restore_value: false

  - id: inspegnimento
    type: boolean
    initial_value: "false"
number:
  - platform: template
    internal: true
    name: "klipperON"
    id: klipperON
    optimistic: true 
    restore_value: false
    min_value: -1
    max_value: 1
    step: 1
    initial_value: -1

text_sensor:
  - platform: template
    name: "Stato Stampante 3D"
    web_server_sorting_weight: 0
    id: stato_stampante


  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server_sorting_weight: 7
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server_sorting_weight: 8
    update_interval: 10s


 
output:
  - platform: ledc
    pin: GPIO40
    id: led_3d

  - platform: ledc
    pin: GPIO38
    id: led_presa
    
interval:
  - interval: 500ms
    then:
      - if:
          condition:
            - lambda: |-
                return (id(inspegnimento) ==true);
          then:
            - output.turn_on: led_3d
            - delay: 250ms
            - output.turn_off: led_3d




  - interval: 1000ms
    then:
      - lambda: |-
          digitalWrite(15, !digitalRead(15));
     
  - interval: 3sec
    then:
      - if:
          condition:
            - lambda: |-
                return (id(klipperON).state == 0 )  ;
          then:                
            - lambda: |-
                id(klipperON).publish_state(-1);

      - script.execute: checkurl
      #- script.wait: checkurl
      - if:
          condition:
            - lambda: |-
                return (id(klipperON).state == -1 )  ;
          then: 
             - lambda: |-
                id(stato_stampante).publish_state("spenta...");          
          else: 
 

switch:
  - platform: gpio
    internal: true
    name: "led"
    id: led
    inverted: true
    pin: GPIO15

  - platform: gpio
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF 
    name: "Relay"
    id: relay
    pin: GPIO34
    inverted: true
    on_turn_on:
      - switch.turn_on: led
      - output.turn_on: led_3d 
      - globals.set:
          id: isrelayON
          value: "true"
      - logger.log: "var=true"
    on_turn_off: 
      - switch.turn_off: led
      - output.turn_off: led_3d 
      - globals.set:
          id: isrelayON
          value: "false"
      - logger.log: "var=false"

  - platform: gpio
    #internal: true
    restore_mode: RESTORE_DEFAULT_OFF 
    name: "presa laboratorio"
    id: presa_laboratorio
    pin: GPIO36
    inverted: true
    on_turn_on:
      - switch.turn_on: led
      - output.turn_on: led_presa 
     
    on_turn_off: 
      - switch.turn_off: led
      - output.turn_off: led_presa 
 
 

  - platform: template
    name: "accendi stampante 3D"
    web_server_sorting_weight: 2
    id: turnON
    optimistic: true
    lambda: return id(turnON).state;  
    on_turn_on:
      - switch.turn_on: relay
      - delay: 500ms
      - switch.turn_off: turnON
      - number.set:
          id: klipperON
          value: -1
      
  - platform: template
    name: "spegni stampante 3D"
    web_server_sorting_weight: 3
    id: turnOFF
    optimistic: true
    lambda: return id(turnOFF).state;  
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: turnOFF
      - if:
          condition:
            - switch.is_on: relay
          then:
            - lambda: |- 
                id(incorso) = false;
                id(klipperON).publish_state(-1);

            - script.execute: spegnila
            - script.wait: spegnila
            - if:
                condition:
                  - lambda: |-
                      return (id(klipperON).state == 0 )  ;
                then:   
                  #- binary_sensor.turn_on: sensore_spegnimento 
                  - logger.log: "Invio comando procedura spegnimento stampante 3D in corso..."
                  - if:
                      condition:
                        - lambda: |-
                            return (id(inspegnimento) ==false);
                      then:
                        - globals.set:
                            id: inspegnimento
                            value: "true"
                      else:
                        - globals.set:
                            id: inspegnimento
                            value: "false"
                        - output.turn_on: led_3d 
                  #- lambda: |-
                  #    ESP_LOGD("main", "response: %d", id(klipperON).state);             
                else: 
                  - logger.log: "Stampante 3D giÃ  spenta o non raggiungibile!"     
                  - switch.turn_off: relay 

  - platform: template
    name: "Spegni in emergenza"
    web_server_sorting_weight: 4
    id: forceTurnOFF
    optimistic: true
    lambda: return id(forceTurnOFF).state;  
    on_turn_on:
      - switch.turn_off: relay
      - delay: 500ms
      - switch.turn_off: forceTurnOFF
      - text_sensor.template.publish:
          id: stato_stampante
          state: "spenta..."

  #- platform: template
  #  name: "test"
  #  internal: true
  #  id: test
  #  optimistic: true
  #  lambda: return id(test).state;  
  #  on_turn_on:
  #    - delay: 500ms
  #    - switch.turn_off: test 
  #    - lambda: |-
  #        HTTPClient http;
  #        http.begin("http://KLIPPER_IP/printer/info");
  #        http.GET();
  #        id(azz1) = int(http.getString()[6]);
  #        //id(kitchen_state) = http.getString()[36] == 'n';
  #        http.end();
  #        ESP_LOGD("main", "Response char1: %d", id(azz1));
          
  - platform: template
    internal: true
    name: "spegnimento in corso"
    web_server_sorting_weight: 5
    id: spegnitimer
    optimistic: true
    lambda: return id(spegnitimer).state;  
    on_turn_on:
      - if:
          condition:
            - lambda: |-
                return (id(inspegnimento) ==true);
          then:
            - globals.set:
                id: inspegnimento
                value: "false"
         
      - if:
          condition:
              lambda: |-
                return id(incorso) == false ;     
          then:   
            - lambda: |-
                id(incorso) = true;
            - delay: 
                seconds: 30
            - if:
                condition:
                    lambda: |-
                      return id(incorso) == true ;     
                then:   
                  - lambda: |-
                      id(incorso) = false ;     
                  - switch.turn_off: relay
                  - switch.turn_off: spegnitimer
            
    on_turn_off:
      - lambda: |-
          id(incorso) = false ;     

binary_sensor:
  - platform: template
    id: sensore_accesa
    name: 'Stampante 3D Accesa:'
    web_server_sorting_weight: 6
    publish_initial_state: True
    lambda: return (id(relay).state);

 

  - platform: template
    id: sensore_spegnimento
    name: 'Spegnimento in corso:'
    publish_initial_state: True
    lambda: return (id(spegnitimer).state);
 
  - platform: gpio
    internal: true
    pin:
      number: GPIO39
      mode:
        input: true
        pullup: true
      inverted: true
    name: emergenza
    id: emergenza
    #filters:
    #  - delayed_off: 9ms
    on_click:
    - min_length: 99ms
      max_length: 999ms
      #click breve
      then:
        - switch.turn_off: relay

  - platform: gpio
    internal: true
    pin:
      number: GPIO35
      mode:
        input: true
        pullup: true
      inverted: true
    name: spegni
    id: spegni
    #filters:
    #  - delayed_off: 9ms
    on_click:
    - min_length: 99ms
      max_length: 999ms
      #click breve
      then:
        - if:
            condition:
                switch.is_on: relay
            then:   
              - switch.turn_on: turnOFF
            else:
              - switch.turn_on: relay

  - platform: gpio
    internal: true
    pin:
      number: GPIO37
      mode:
        input: true
        pullup: true
      inverted: true
    name: presa
    id: presa
    on_click:
    - min_length: 99ms
      max_length: 999ms
      #click breve
      then:
        - switch.toggle: presa_laboratorio



script:
  - id: spegnila
    then:
      - http_request.get:
          url: "http://KLIPPER_IP/printer/gcode/script?script=spegnistampante"
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                  id(klipperON).publish_state(0);
                  return true;
                  });

  - id: checkurl
    then:
      - http_request.get:
          url: "http://KLIPPER_IP/printer/objects/query?webhooks&virtual_sdcard&print_stats"
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  if (response->status_code == 200)
                  {
                  id(klipperON).publish_state(0);
                  }
                  json::parse_json(body, [](JsonObject doc) -> bool 
                  {
                  JsonObject result_status = doc["result"]["status"]["print_stats"];
                  JsonObject layers = doc["result"]["status"]["print_stats"]["info"];
                  const char* result_status_print_stats_state = result_status["state"]; // "standby"
                  //const char* filename = result_status["filemane"]; // "standby"
                  //id(stato_stampante).publish_state(result_status_print_stats_state);
                  ESP_LOGD("main", "stauts: %s", result_status_print_stats_state);
                  JsonObject result_status_virtual_sdcard = doc["result"]["status"]["virtual_sdcard"];
                  double result_status_virtual_sdcard_progress = result_status_virtual_sdcard["progress"];
                  //id(percentuale).publish_state(result_status_virtual_sdcard_progress*100 );

                  //result_status_print_stats_state="printing";
                  if (strcmp(result_status_print_stats_state, "printing") == 0)
                  {
                  //id(file_name).publish_state(filename);
                  double layerx = layers["current_layer"];
                  double layert = layers["total_layer"];
                  //layert=77;
                  //layerx=1;
                  char lx[5];
                  dtostrf(layerx, 1, 0, lx);
                  char lt[5];
                  dtostrf(layert, 1, 0, lt);
                  //DOUBLE TO CHAR ARRAY (char*)
                  double percento=(result_status_virtual_sdcard_progress * 100 );
                  //percento=10.5;
                  char buf[7];
                  dtostrf(percento, 5, 1, buf);
                  ////////////////////////////////////////////////////
                  //Concatenate char arrays (char*) on unique char array (char*)
                  char out[100];
                  strcpy(out ,result_status_print_stats_state);
                  strcat(out, ": ");
                  strcat(out ,buf);
                  strcat(out ,"% - ");
                  strcat(out ,lx);
                  strcat(out ," di ");
                  strcat(out ,lt);
                  strcat(out ," layers");
                  ////////////////////////////////////////////////////
                  id(stato_stampante).publish_state(out);
                  }
                  else
                  {
                  id(stato_stampante).publish_state(result_status_print_stats_state);
                  }
                  return true;
                  });

           



 
