substitutions:
  name: esphome-web-f8a6fc
  friendly_name: stampante 3D

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

  on_boot:
    priority: -100
    then:
  
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: SSIDNAME1
    - password: password1
    - ssid: SSIDNAME2
    - password: password2
   
  manual_ip:
    static_ip: 192.168.1.94
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}
 

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/firmware/esphome-web/esp32c3.yaml@main
  import_full_config: true
 
# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

http_request:
   
  id: httpget
  useragent: esphome/device
  verify_ssl: false
  timeout: 
    seconds: 2

globals:
  - id: incorso
    type: boolean
  - id: isrelayON
    type: boolean
    restore_value: false
  - id: azz1
    type: int

number:
  - platform: template
    internal: true
    name: "klipperON"
    id: klipperON
    optimistic: true 
    restore_value: false
    min_value: -1
    #max ovrebbe essere 59, max 60, ma visto che si incrementa di 10 potrebbe essere anche 69, anche 70.....
    max_value: 1
    step: 1
    initial_value: -1

text_sensor:
  - platform: template
    name: "Stato Stampante 3D"
    id: stato_stampante
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      
sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    update_interval: 10s
    
interval:
  - interval: 3sec
    then:
      - number.set:
          id: klipperON
          value: -1
      - script.execute: checkurl
      #- script.wait: checkurl
      - if:
              condition:
                - lambda: |-
                    return (id(klipperON).state == 0 )  ;
              then:           
              else: 
                - lambda: |-
                    id(stato_stampante).publish_state("spenta...");
    

switch:
  - platform: gpio
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF 
    name: "Relay"
    id: relay
    pin: GPIO04
    on_turn_on:
      - globals.set:
          id: isrelayON
          value: "true"
      - logger.log: "var=true"
    on_turn_off: 
      - globals.set:
          id: isrelayON
          value: "false"
      - logger.log: "var=false"
                  
  - platform: template
    name: "accendi stampante 3D"
    id: turnON
    optimistic: true
    lambda: return id(turnON).state;  
    on_turn_on:
      - switch.turn_on: relay
      - delay: 500ms
      - switch.turn_off: turnON
      - number.set:
          id: klipperON
          value: -1
      
  - platform: template
    name: "spegni stampante 3D"
    id: turnOFF
    optimistic: true
    lambda: return id(turnOFF).state;  
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: turnOFF
      - if:
          condition:
            - switch.is_on: relay
          then:
            - lambda: |- 
                id(incorso) = false;
            - number.set:
                id: klipperON
                value: -1
            
            - script.execute: spegnila
            - script.wait: spegnila
            - if:
                condition:
                  - lambda: |-
                      return (id(klipperON).state == 0 )  ;
                then:   
                  #- binary_sensor.turn_on: sensore_spegnimento 
                  - logger.log: "Invio comando procedura spegnimento stampante 3D in corso..."      
                  #- lambda: |-
                  #    ESP_LOGD("main", "response: %d", id(klipperON).state);             
                else: 
                  - logger.log: "Stampante 3D gi√† spenta o non raggiungibile!"     
                  - switch.turn_off: relay 

  - platform: template
    name: "Spegni in emergenza"
    id: forceTurnOFF
    optimistic: true
    lambda: return id(forceTurnOFF).state;  
    on_turn_on:
      - switch.turn_off: relay
      - delay: 500ms
      - switch.turn_off: forceTurnOFF
      - text_sensor.template.publish:
          id: stato_stampante
          state: "spenta..."
  - platform: template
    name: "test"
    internal: true
    id: test
    optimistic: true
    lambda: return id(test).state;  
    on_turn_on:
      - delay: 500ms
      - switch.turn_off: test 
      - lambda: |-
          HTTPClient http;
          http.begin("http://KLIPPER_IP/printer/info");
          http.GET();
          id(azz1) = int(http.getString()[6]);
          //id(kitchen_state) = http.getString()[36] == 'n';
          http.end();
          ESP_LOGD("main", "Response char1: %d", id(azz1));
          
  - platform: template
    internal: true
    name: "spegnimento in corso"
    id: spegnitimer
    optimistic: true
    lambda: return id(spegnitimer).state;  
    on_turn_on:
       - if:
          condition:
              lambda: |-
                return id(incorso) == false ;     
          then:   
            - lambda: |-
                id(incorso) = true;
            - delay: 
                seconds: 30
            - if:
                condition:
                    lambda: |-
                      return id(incorso) == true ;     
                then:   
                  - lambda: |-
                      id(incorso) = false ;     
                  - switch.turn_off: relay
                  - switch.turn_off: spegnitimer
            
    on_turn_off:
      - lambda: |-
          id(incorso) = false ;     


binary_sensor:
  - platform: template
    id: sensore_accesa
    name: 'Stampante 3D Accesa:'
    publish_initial_state: True
    lambda: return (id(relay).state);

  - platform: template
    id: sensore_spegnimento
    name: 'Spegnimento in corso:'
    publish_initial_state: True
    lambda: return (id(spegnitimer).state);
 

 #tasto fisico per spegnimento emergenza stampante 3D 
 #connesso a GND, quindi in pullup
  - platform: gpio
    internal: true
    pin:
      number: GPIO2
      mode:
        input: true
        pullup: true
      inverted: true
    name: emergenza
    id: emergenza
    filters:
      - delayed_off: 49ms
    on_click:
    - min_length: 50ms
      #click breve
      then:
        - switch.turn_off: relay

#tasto fisico per spegnimento programmato (fine stampa se estrusore < 50 gradi C.) stampante 3D 
 #connesso a GND, quindi in pullup
  - platform: gpio
    internal: true
    pin:
      number: GPIO3
      mode:
        input: true
        pullup: true
      inverted: true
    name: spegni
    id: spegni
    filters:
      - delayed_off: 149ms
    on_click:
    - min_length: 150ms
    #  max_length: 499ms
      #click breve
      then:
        - if:
            condition:
                switch.is_on: relay
            then:   
              - switch.turn_on: turnOFF
            else:
              - switch.turn_on: relay
script:
  - id: spegnila
    then:
      - http_request.get:
                url: "http://KLIPPER_IP/printer/gcode/script?script=spegnistampante"
                capture_response: true
                on_response:
                  then:
                    - lambda: |-
                        json::parse_json(body, [](JsonObject root) -> bool {
                        id(klipperON).publish_state(root["result"]);
                        auto call = id(klipperON).make_call();
                        call.set_value((root["result"]));
                        call.perform();
                        return true;
                        });
  - id: checkurl
    then:
      - http_request.get:
          url: "http://KLIPPER_IP/printer/objects/query?webhooks&virtual_sdcard&print_stats"
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  if (response->status_code == 200)
                  {
                  id(klipperON).publish_state(0);
                  }
                  json::parse_json(body, [](JsonObject doc) -> bool 
                  {
                  JsonObject result_status = doc["result"]["status"]["print_stats"];
                  const char* result_status_print_stats_state = result_status["state"]; // "standby"
                  //id(stato_stampante).publish_state(result_status_print_stats_state);
                  ESP_LOGD("main", "stauts: %s", result_status_print_stats_state);
                  JsonObject result_status_virtual_sdcard = doc["result"]["status"]["virtual_sdcard"];
                  double result_status_virtual_sdcard_progress = result_status_virtual_sdcard["progress"];
                  //id(percentuale).publish_state(result_status_virtual_sdcard_progress*100 );
                  //result_status_print_stats_state="printing";
                  if (strcmp(result_status_print_stats_state, "printing") == 0)
                  {
                  JsonObject layers = doc["result"]["status"]["print_stats"]["info"];
                  int layerx = layers["current_layer"];
                  int layert = layers["total_layer"];
                  //layert=77;
                  //layerx=1;
                  char lx[5];
                  dtostrf(layerx, 1, 0, lx);
                  char lt[5];
                  dtostrf(layert, 1, 0, lt);
                  //DOUBLE TO CHAR ARRAY (char*)
                  double percento=(result_status_virtual_sdcard_progress * 100 );
                  //percento=10.5;
                  char buf[5];
                  dtostrf(percento, 5, 1, buf);
                  ////////////////////////////////////////////////////
                  //Concatenate char arrays (char*) on unique char array (char*)
                  char out[50];
                  strcpy(out ,result_status_print_stats_state);
                  strcat(out, ": ");
                  strcat(out ,buf);
                  strcat(out ,"% - ");
                  strcat(out ,lx);
                  strcat(out ," di ");
                  strcat(out ,lt);
                  strcat(out ," layers");
                  ////////////////////////////////////////////////////
                  id(stato_stampante).publish_state(out);
                  }
                  else
                  {
                  id(stato_stampante).publish_state(result_status_print_stats_state);
                  }
                  return true;
                  });

           

